#!/usr/bin/env groovy

// vim: syntax=groovy

@Grab(group='org.codehaus.groovy.modules.http-builder', module='http-builder', version='0.7')
import groovyx.net.http.RESTClient

def home = System.getProperty('user.home')
assert home != null
def token = new File("$home/.github-token").text.trim()
def agent = new File("$home/.github-user").text.trim()
def org = System.env['GITHUB_ORG'] ?: System.getProperty('GITHUB_ORG')
assert org != null : "GITHUB_ORG environment variable must be set"
def url = 'https://api.github.com'
def auth = [ Authorization: "token $token", 'User-Agent': agent ]
def client = new RESTClient(url)
client.defaultRequestHeaders.putAll(auth)

def parseLinks = { resp ->
  def links = resp.getFirstHeader('Link').toString()
  def elements = links.split(",")*.trim()
  def map = [:]
  for (e in elements) {
    def vk = e.split(";")*.trim()
    def v = (vk[0] =~ /<(.*)>/)[0][1]
    def k = (vk[1] =~ /"(.*)"/)[0][1]
    map[k] = v
  }
  return map
}

def getPathAndQuery = { link ->
  def s = link.split('\\?')
  def p = s[0] - url
  def m = (s[1] =~ /(.*)=(.*)/)[0]
  return [path: p, query: ["${m[1]}": m[2]]]
}

def response = client.get(path: "/orgs/$org/teams")
def teams = response.data
def links = parseLinks(response)

while (links.next != null) {
  response = client.get(getPathAndQuery(links.next))
  teams.addAll(response.data)
  links = parseLinks(response)
}

teams.each {
  println "${it.id}\t${it.slug}"
}
